import React, { useEffect, useState} from 'react'
import axios from 'axios'
import jaxios from '../../../util/JwtUtil';
import { useNavigate } from "react-router-dom";
import "../../../style/music.scss";
import UpdateArtistModal from "../artist/UpdateArtistModal";


const Music = () => {
    const [albumList, setAlbumList] = useState([]);
    const [search, setSearch] = useState("");
    const navigate = useNavigate();
    const [showArtistModal, setShowArtistModal] = useState(false); // 
    const [selectedArtist, setSelectedArtist] = useState(null);


    

    const getArtistInfo = async (artistId) => {
        try {
            const response = await jaxios.get(`/api/music/getArtist`, {
                params: { artistId }
            });
            setSelectedArtist(response.data.artist); // Í∞ÄÏàò Ï†ïÎ≥¥ Ï†ÄÏû•
            setShowArtistModal(true); // Î™®Îã¨ Ïó¥Í∏∞
        } catch (error) {
            console.error("Í∞ÄÏàò Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§:", error);
            alert("Í∞ÄÏàò Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
        }
    };

    const handleArtistClick = (artistId) => {
        getArtistInfo(artistId);
    };



    const onSearch = (e) => {
        setSearch(e.target.value);
    };





    const getAlbumList = async () => {
        try {
            const response = await jaxios.get("/api/music/getAllAlbum");
            setAlbumList(response.data.album);
            console.log("üéµ Ïï®Î≤î Î¶¨Ïä§Ìä∏ Î∂àÎü¨Ïò§Í∏∞ ÏÑ±Í≥µ:", response.data.album);
        } catch (error) {
            console.error("Ïï®Î≤î Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§:", error);
        }
    };

    useEffect(() => {
        getAlbumList();
    }, []);

    useEffect(() => {
        
    }, [albumList]); 



    const deleteAlbum = async (albumId) => {
        if (!window.confirm("Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?")) return;
    
        try {
            // Î∞±ÏóîÎìúÏóêÏÑú DELETE ÏöîÏ≤≠ÏùÑ Query ParameterÎ°ú Î∞õÏùå
            const response = await jaxios.delete(`/api/music/deleteAlbum`, {
                params: { albumId }, // Query Parameter Î∞©ÏãùÏúºÎ°ú Ï†ÑÎã¨
            });
    
            if (response.data.msg === "yes") {
                alert("ÏÇ≠Ï†ú ÏôÑÎ£å!");
                setAlbumList(prev => prev.filter(album => album.albumId !== albumId));
            } else {
                alert("ÏÇ≠Ï†ú Ïã§Ìå®");
            }
        } catch (error) {
            console.error("Ïï®Î≤î ÏÇ≠Ï†ú Ïò§Î•ò:", error);
            alert("ÏÇ≠Ï†ú Ï§ë Ïò§Î•ò Î∞úÏÉù");
        }
    };
    



    const searchFilter = search === "" ? albumList : albumList.filter(album =>    
        album.title.toLowerCase().includes(search.toLowerCase())    

    );
    


    return (
        <div className={"musicPage"}>          
            <div className="musicContent">
            <h1>Ïï®Î≤î Í¥ÄÎ¶¨</h1>
                <div className='top2' >
                <input type="text" className="searchInput" placeholder="ÏùåÏõê Í≤ÄÏÉâ (Ï†úÎ™© ÎòêÎäî Ïû•Î•¥)" value={search} onChange={onSearch}/>
                <button className="addMusicButton" onClick={() => navigate("/AddAlbum")}>Ïï®Î≤î Ï∂îÍ∞Ä</button>   
                </div>   
                    <table>
                        <thead>
                            <tr>
                                <th>Í∞ÄÏàò</th>
                                <th>Ïï®Î≤î</th>                         
                                <th>Ïù¥ÎØ∏ÏßÄ</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                        {albumList.length === 0 ? (
                                        <tr>
                                            <td colSpan="6" className="noData">Îì±Î°ùÎêú ÏùåÏõêÏù¥ ÏóÜÍ±∞ÎÇò Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.</td>
                                        </tr>
                                    ) : (     
                                    searchFilter.map((album, index) => (
                                        <tr key={index}>
                                                <td>
                                                    <span className="clickable"
                                                    onClick={() => handleArtistClick(album.artistId)}>
                                                        {album.artistName}
                                                    </span>
                                                </td>
                                                <td>
                                                    <span className="clickable" onClick={() =>  navigate(`/UpdateAlbum/${album.albumId}`)}>
                                                        {album.title}
                                                    </span>
                                                </td>                               
                                                <td>
                                                    <img src={album.image} alt={album.title} width="50" />
                                                </td>
                                                <td>
                                                    <button className="deleteBtn" onClick={() => deleteAlbum(album.albumId)}>üóë</button>
                                                </td>
                                            </tr>
                                        ))
                                    )}
                            </tbody>
                    </table>  
                    {showArtistModal && (
                <UpdateArtistModal artist={selectedArtist} onClose={() => setShowArtistModal(false)}
                />
            )}                       
            </div>  
        </div>
    );
};

export default Music
